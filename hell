// Cache the DOM elements and selectors
const sidemenu = document.getElementById("sidemenu");
const menuBtn = document.querySelector(".fas.fa-bars");
const images = document.querySelectorAll('.gallery img');
const backToTopButton = document.getElementById('back-to-top');
const form = document.forms['submit-to-google-sheet'];
const msg = document.getElementById("msg");
const scriptURL = 'https://script.google.com/macros/s/AKfycbwPJtO1i5nwX9TyVPxW5F5j5A-5Fvt_04H-lBlzA8skNQ2i1D5X-Zmj-Rp5SQ5nn5cG/exec';

// Function to open the sidemenu
function openmenu() {
  sidemenu.style.right = "0";
}

// Function to close the sidemenu
function closemenu() {
  sidemenu.style.right = "-200px";
}

// Handle click outside the sidemenu function
function handleClickOutside(event) {
  // If the sidemenu does not contain the target
  // And the target is not the menu button, then close the menu
  if (!sidemenu.contains(event.target) && event.target !== menuBtn) {
    closemenu();
  }
}

// Remove zoom class from all images except the clicked one
function removeZoomClass(image) {
  images.forEach(img => {
    if (img !== image) {
      img.classList.remove('zoom');
    } else { // added an else condition to add 'unzoom' class to the clicked image when it already has the zoom class
      img.classList.toggle('unzoom');
    }
  });
}

// Add click event listeners to images in gallery
function addClickEventToImages() {
  images.forEach(image => {
    image.addEventListener('click', () => {
      if (image.classList.contains('zoom')) {
        image.classList.toggle('zoom');
        image.classList.toggle('unzoom');// toggles unzoom class when zoom class is already present on clicked image
      } else {
        removeZoomClass(image);
        image.classList.add('zoom');
      }
    });
  });
}

// Reset message after two seconds
function resetMessage() {
  setTimeout(() => { // used an Arrow function for shorter syntax
    msg.innerHTML = "";
  }, 2000)
}

// Create a function to handle form submission
function handleFormSubmission(e) {
  e.preventDefault(); // Prevent the default action
  fetch(scriptURL, { method: 'POST', body: new FormData(form) })
    .then(response => {
      // On response, set the innerHTML of the msg element to success
      msg.innerHTML = "Message sent Successfully";
      resetMessage();
      form.reset(); // Reset the form
    })
    .catch(error => {
      console.error('Error!', error.message); // Log the error message for debugging
    });
}
// Add event listeners on load
window.addEventListener('load', () => {
  // Add event listener to close sidemenu when scrolling down
  window.addEventListener('scroll', () => {
    if (sidemenu.style.right === "0px") {
      closemenu();
    }
    // Update visibility and opacity of 'back-to-top' button
    if (window.scrollY > 800 || document.documentElement.scrollTop > 800) {
      backToTopButton.style.opacity = '1';
      backToTopButton.style.visibility = 'visible';
      backToTopButton.style.transitionDelay = '0s';

      // Zoom out any zoomed image when user scrolls
      if (document.querySelector('.gallery img.zoom')) {
        removeZoomClass(document.querySelector('.gallery img.zoom'));
      }
    } else {
      backToTopButton.style.opacity = '0';
      backToTopButton.style.visibility = 'hidden';
      backToTopButton.style.transitionDelay = '0.3s';
    }

    // Handle click event on back-to-top button
    backToTopButton.addEventListener('click', () => {
      topFunction();
    });

    // Function used to reset the document body and document element's scroll position to 0
    function topFunction() {
      document.body.scrollTop = 0; // For Safari
      document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    }
  });

  // Add event listener to close nav bar when clicking outside of it
  function handleClickOutside(event) {
    if (event.target !== navToggle && !nav.contains(event.target)) {
      nav.classList.remove('nav-open');
      navToggle.setAttribute('aria-expanded', 'false');
    }
  }

  document.addEventListener('click', handleClickOutside);
});
